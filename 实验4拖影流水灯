`timescale 1ns / 1ps

module breath_led(
    input wire clk,
    input wire rst,
    output reg [0:15]led
);
    reg [13:0]cnt1;
    reg [13:0]cnt2;
    reg en;
    reg [3:0]count = 0;
    reg [15:0]led1;

    always@(posedge clk, negedge rst)
        if(!rst)
            cnt1 <= 14'd0;
        else if(cnt1 == 14'd9999)
            cnt1 <= 14'd0;
        else 
            cnt1 <= cnt1 + 14'd1;

    always@(posedge clk, negedge rst)
        if(!rst) begin
            cnt2 <= 14'd0;
            count <= 4'd0;
        end
        else if(cnt1 == 14'd9999 && cnt2 == 14'd9999) begin
            cnt2 <= 14'd0;
            count <= (count + 1) % 16;
        end
        else if(cnt1 == 14'd9999)
            cnt2 <= cnt2 + 14'd1;

    always @(posedge clk, negedge rst)
        if(!rst)
            en <= 1'b0;
        else if(cnt1 == 14'd9999 && cnt2 == 14'd9999)
            en <= ~en;
        else
            en <= en;

    always @(posedge clk, negedge rst)
        if(!rst)
            led1 <= 16'b1010_1010_1010_1010;
        else if((en == 1'b0 && cnt1 < cnt2) || (en == 1'b1 && cnt1 > cnt2))
            led1 <= 16'b0101_0101_0101_0101;
        else 
            led1 <= 16'b1010_1010_1010_1010;
            
    integer i;
    always@(led1 or count)
    begin
        led = 0; // Reset all LEDs
        for (i = 0; i < 16; i=i+1) begin
            if (i == count || i == ((count - 1) % 16)) begin
                led[i] = led1[i];
            end
        end
    end
endmodule
