module gundongxuehao( 
    input wire clk100MHz,
    input wire rst,
    output wire [ 3: 0] pos,
    output wire [ 7: 0] seg
);

 wire clk3051hz, clk3Hz;
 wire [15: 0] dataBus;
 wire areset=~rst;

  clkDiv clkDiv1(clk100MHz,areset,clk3051hz,clk3Hz);
  GPU GPU1(clk100MHz,clk3Hz,areset,dataBus);
  segMsg segMsg(clk3051hz,areset,dataBus,pos,seg);

endmodule

  module clkDiv(        //分频模块
 input wire clk100MHz,
 input wire rst ,
 output wire clk3051hz,
  output wire clk3Hz 
  );
 
  reg[25:0]count;//定义一个计数器

  always@(posedge clk100MHz)
      if(rst)
        count<=26'd0;
      else
        count<=count+26'd1;

  assign clk3051hz=count[14];//根据计数器的第17位的变化产生新的时钟
  assign clk3Hz =count[24];//根据计数器的25位的变化产生新的时钟

  endmodule

  module GPU(       //显示模块
  input wire clk100MHz,
  input wire clk3Hz ,
  input wire rst ,
  output wire[15:0]dataBus
  );

    reg [39:0]msgArray;
    parameter NUMBER=40'hA202341604;//将要显示的数据存为常数
    assign dataBus=msgArray[39:24];//把移位寄存器的高16位传递给数码管显示模块(四个数码管每个数码管显示四位数据)
 
  always@(posedge clk100MHz)
    if(rst)
       msgArray<=NUMBER;
   else if(clk3Hz)
      msgArray <= {msgArray[35:0], msgArray[39:36]};//在 clk3Hz 的上升沿进行向左循环移动 4 位
  endmodule

 
 module segMsg(
        input wire clk3051hz,
        input wire rst ,
        input wire[15:0]dataBus,
        output reg [3:0]pos ,
        output reg [7:0]seg
);

        reg [1:0]posC;//数码管计数器
        reg [3:0]dataP;//数据的一部分

            always@(posedge clk3051hz)begin
                if(rst)begin
                  pos <=4'hF;
                  dataP<=4'hA;
                end else begin
                  case(posC)
                    //将数据总线的3:0位显示在第一个数码管上
                    0:begin
                    pos <=4'b0001;
                    dataP<=dataBus[3:0];
                     end
                    //将数据总线的7:4位显示在第二个数码管上
                    1:begin
                      pos <=4'b0010;
                      dataP<=dataBus[7:4];
                      end
                      //将数据总线的11:8位显示在第三个数码管上
                    2:begin
                      pos <=4'b0100;
                      dataP<=dataBus[11:8];
                     end
                     //将数据总线的15:12位显示在第四个数码管上
                    3:begin
                      pos <=4'b1000;
                      dataP<=dataBus[15:12];
                      end
                     endcase
                 end
            end
 
        always@(posedge clk3051hz)begin
        if(rst)
            posC<=2'd0;
        else
            posC<=posC+2'd1;
        end
 
  //解码数据来拉制数码管的每一段
        always@(dataP)
        case(dataP)
        0:seg=8'b0011_1111;
        1:seg=8'b0000_0110;
        2:seg=8'b0101_1011;
        3:seg=8'b0100_1111;
        4:seg=8'b0110_0110;
        5:seg=8'b0110_1101;
        6:seg=8'b0111_1101;
        7:seg=8'b0000_0111;
        8:seg=8'b0111_1111;
        9:seg=8'b0110_1111;
        10:seg=8'b0011_1110;//4'hA 处显学号U
        default:seg=8'b0000_0000;
        endcase
  endmodule
